//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EmployerServicePortal.Employer {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmployerSoap", Namespace="http://tempuri.org/")]
    public partial class Employer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FetchCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchEmployerContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateScheduleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchAllRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback MapDeliverybyBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback MapDeliverybyEmployerOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchStatementEmployerBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchPINsBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateStatementEmployerBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogRequestDocOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GbasiOperationCompleted;
        
        private System.Threading.SendOrPostCallback NotifyIncidentOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncidentNotifierOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DefineViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnMapRoleViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback MapRoleViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchViewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchRequestCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchIncidentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchRoleViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchInternalUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchExternalUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ADAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback Report_CFI_Status_Report_By_EmployerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Report_Pencom_Employer_CodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Report_RSA_Details_by_employerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Report_RSA_UnfundedOperationCompleted;
        
        private System.Threading.SendOrPostCallback LOGINOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchCompanYEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchAssignmentHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchIncidentDocOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetaudittrailOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyExternalUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdministerExternalUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdministerInternalUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExternalLoginOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Employer() {
            this.Url = global::EmployerServicePortal.Properties.Settings.Default.EmployerServicePortal_Employer_Employer;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FetchCompaniesCompletedEventHandler FetchCompaniesCompleted;
        
        /// <remarks/>
        public event FetchEmployerContactCompletedEventHandler FetchEmployerContactCompleted;
        
        /// <remarks/>
        public event ValidateScheduleCompletedEventHandler ValidateScheduleCompleted;
        
        /// <remarks/>
        public event ValidateNameCompletedEventHandler ValidateNameCompleted;
        
        /// <remarks/>
        public event FetchAllRolesCompletedEventHandler FetchAllRolesCompleted;
        
        /// <remarks/>
        public event UpdateRoleCompletedEventHandler UpdateRoleCompleted;
        
        /// <remarks/>
        public event MapDeliverybyBatchCompletedEventHandler MapDeliverybyBatchCompleted;
        
        /// <remarks/>
        public event MapDeliverybyEmployerCompletedEventHandler MapDeliverybyEmployerCompleted;
        
        /// <remarks/>
        public event FetchStatementEmployerBatchCompletedEventHandler FetchStatementEmployerBatchCompleted;
        
        /// <remarks/>
        public event FetchPINsBatchCompletedEventHandler FetchPINsBatchCompleted;
        
        /// <remarks/>
        public event CreateStatementEmployerBatchCompletedEventHandler CreateStatementEmployerBatchCompleted;
        
        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;
        
        /// <remarks/>
        public event LogRequestDocCompletedEventHandler LogRequestDocCompleted;
        
        /// <remarks/>
        public event CreateRequestCompletedEventHandler CreateRequestCompleted;
        
        /// <remarks/>
        public event GbasiCompletedEventHandler GbasiCompleted;
        
        /// <remarks/>
        public event NotifyIncidentCompletedEventHandler NotifyIncidentCompleted;
        
        /// <remarks/>
        public event IncidentNotifierCompletedEventHandler IncidentNotifierCompleted;
        
        /// <remarks/>
        public event AssignRequestCompletedEventHandler AssignRequestCompleted;
        
        /// <remarks/>
        public event DefineViewCompletedEventHandler DefineViewCompleted;
        
        /// <remarks/>
        public event UnMapRoleViewCompletedEventHandler UnMapRoleViewCompleted;
        
        /// <remarks/>
        public event MapRoleViewCompletedEventHandler MapRoleViewCompleted;
        
        /// <remarks/>
        public event FetchViewsCompletedEventHandler FetchViewsCompleted;
        
        /// <remarks/>
        public event FetchRequestCategoriesCompletedEventHandler FetchRequestCategoriesCompleted;
        
        /// <remarks/>
        public event FetchIncidentsCompletedEventHandler FetchIncidentsCompleted;
        
        /// <remarks/>
        public event FetchRoleViewCompletedEventHandler FetchRoleViewCompleted;
        
        /// <remarks/>
        public event FetchInternalUsersCompletedEventHandler FetchInternalUsersCompleted;
        
        /// <remarks/>
        public event FetchExternalUsersCompletedEventHandler FetchExternalUsersCompleted;
        
        /// <remarks/>
        public event ADAuthCompletedEventHandler ADAuthCompleted;
        
        /// <remarks/>
        public event Report_CFI_Status_Report_By_EmployerCompletedEventHandler Report_CFI_Status_Report_By_EmployerCompleted;
        
        /// <remarks/>
        public event Report_Pencom_Employer_CodeCompletedEventHandler Report_Pencom_Employer_CodeCompleted;
        
        /// <remarks/>
        public event Report_RSA_Details_by_employerCompletedEventHandler Report_RSA_Details_by_employerCompleted;
        
        /// <remarks/>
        public event Report_RSA_UnfundedCompletedEventHandler Report_RSA_UnfundedCompleted;
        
        /// <remarks/>
        public event LOGINCompletedEventHandler LOGINCompleted;
        
        /// <remarks/>
        public event FetchCompanYEmployeesCompletedEventHandler FetchCompanYEmployeesCompleted;
        
        /// <remarks/>
        public event FetchAssignmentHistoryCompletedEventHandler FetchAssignmentHistoryCompleted;
        
        /// <remarks/>
        public event FetchIncidentDocCompletedEventHandler FetchIncidentDocCompleted;
        
        /// <remarks/>
        public event GetaudittrailCompletedEventHandler GetaudittrailCompleted;
        
        /// <remarks/>
        public event LogErrorCompletedEventHandler LogErrorCompleted;
        
        /// <remarks/>
        public event ModifyExternalUserCompletedEventHandler ModifyExternalUserCompleted;
        
        /// <remarks/>
        public event AdministerExternalUserCompletedEventHandler AdministerExternalUserCompleted;
        
        /// <remarks/>
        public event AdministerInternalUserCompletedEventHandler AdministerInternalUserCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ExternalLoginCompletedEventHandler ExternalLoginCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCompanies", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchCompanies(string BySAPID, string SAPID) {
            object[] results = this.Invoke("FetchCompanies", new object[] {
                        BySAPID,
                        SAPID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCompaniesAsync(string BySAPID, string SAPID) {
            this.FetchCompaniesAsync(BySAPID, SAPID, null);
        }
        
        /// <remarks/>
        public void FetchCompaniesAsync(string BySAPID, string SAPID, object userState) {
            if ((this.FetchCompaniesOperationCompleted == null)) {
                this.FetchCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCompaniesOperationCompleted);
            }
            this.InvokeAsync("FetchCompanies", new object[] {
                        BySAPID,
                        SAPID}, this.FetchCompaniesOperationCompleted, userState);
        }
        
        private void OnFetchCompaniesOperationCompleted(object arg) {
            if ((this.FetchCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCompaniesCompleted(this, new FetchCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchEmployerContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchEmployerContact(string CompanyID) {
            object[] results = this.Invoke("FetchEmployerContact", new object[] {
                        CompanyID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchEmployerContactAsync(string CompanyID) {
            this.FetchEmployerContactAsync(CompanyID, null);
        }
        
        /// <remarks/>
        public void FetchEmployerContactAsync(string CompanyID, object userState) {
            if ((this.FetchEmployerContactOperationCompleted == null)) {
                this.FetchEmployerContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchEmployerContactOperationCompleted);
            }
            this.InvokeAsync("FetchEmployerContact", new object[] {
                        CompanyID}, this.FetchEmployerContactOperationCompleted, userState);
        }
        
        private void OnFetchEmployerContactOperationCompleted(object arg) {
            if ((this.FetchEmployerContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchEmployerContactCompleted(this, new FetchEmployerContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateSchedule", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateSchedule(string ClientName, string RSAPIN, string EmployeeMand, string EmployerMand, string EmployeeVC, string EmployerVC, string Total, string EmployerID, string userkey, string uid) {
            object[] results = this.Invoke("ValidateSchedule", new object[] {
                        ClientName,
                        RSAPIN,
                        EmployeeMand,
                        EmployerMand,
                        EmployeeVC,
                        EmployerVC,
                        Total,
                        EmployerID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateScheduleAsync(string ClientName, string RSAPIN, string EmployeeMand, string EmployerMand, string EmployeeVC, string EmployerVC, string Total, string EmployerID, string userkey, string uid) {
            this.ValidateScheduleAsync(ClientName, RSAPIN, EmployeeMand, EmployerMand, EmployeeVC, EmployerVC, Total, EmployerID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ValidateScheduleAsync(string ClientName, string RSAPIN, string EmployeeMand, string EmployerMand, string EmployeeVC, string EmployerVC, string Total, string EmployerID, string userkey, string uid, object userState) {
            if ((this.ValidateScheduleOperationCompleted == null)) {
                this.ValidateScheduleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateScheduleOperationCompleted);
            }
            this.InvokeAsync("ValidateSchedule", new object[] {
                        ClientName,
                        RSAPIN,
                        EmployeeMand,
                        EmployerMand,
                        EmployeeVC,
                        EmployerVC,
                        Total,
                        EmployerID,
                        userkey,
                        uid}, this.ValidateScheduleOperationCompleted, userState);
        }
        
        private void OnValidateScheduleOperationCompleted(object arg) {
            if ((this.ValidateScheduleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateScheduleCompleted(this, new ValidateScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateName(string ScheduleName, string Lastname, string Firstname, string Othernames) {
            object[] results = this.Invoke("ValidateName", new object[] {
                        ScheduleName,
                        Lastname,
                        Firstname,
                        Othernames});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateNameAsync(string ScheduleName, string Lastname, string Firstname, string Othernames) {
            this.ValidateNameAsync(ScheduleName, Lastname, Firstname, Othernames, null);
        }
        
        /// <remarks/>
        public void ValidateNameAsync(string ScheduleName, string Lastname, string Firstname, string Othernames, object userState) {
            if ((this.ValidateNameOperationCompleted == null)) {
                this.ValidateNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateNameOperationCompleted);
            }
            this.InvokeAsync("ValidateName", new object[] {
                        ScheduleName,
                        Lastname,
                        Firstname,
                        Othernames}, this.ValidateNameOperationCompleted, userState);
        }
        
        private void OnValidateNameOperationCompleted(object arg) {
            if ((this.ValidateNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateNameCompleted(this, new ValidateNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchAllRoles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchAllRoles() {
            object[] results = this.Invoke("FetchAllRoles", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchAllRolesAsync() {
            this.FetchAllRolesAsync(null);
        }
        
        /// <remarks/>
        public void FetchAllRolesAsync(object userState) {
            if ((this.FetchAllRolesOperationCompleted == null)) {
                this.FetchAllRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchAllRolesOperationCompleted);
            }
            this.InvokeAsync("FetchAllRoles", new object[0], this.FetchAllRolesOperationCompleted, userState);
        }
        
        private void OnFetchAllRolesOperationCompleted(object arg) {
            if ((this.FetchAllRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchAllRolesCompleted(this, new FetchAllRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRole", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateRole(string NewRoleID, string SAPID, string userkey, string uid) {
            object[] results = this.Invoke("UpdateRole", new object[] {
                        NewRoleID,
                        SAPID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRoleAsync(string NewRoleID, string SAPID, string userkey, string uid) {
            this.UpdateRoleAsync(NewRoleID, SAPID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void UpdateRoleAsync(string NewRoleID, string SAPID, string userkey, string uid, object userState) {
            if ((this.UpdateRoleOperationCompleted == null)) {
                this.UpdateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRoleOperationCompleted);
            }
            this.InvokeAsync("UpdateRole", new object[] {
                        NewRoleID,
                        SAPID,
                        userkey,
                        uid}, this.UpdateRoleOperationCompleted, userState);
        }
        
        private void OnUpdateRoleOperationCompleted(object arg) {
            if ((this.UpdateRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRoleCompleted(this, new UpdateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MapDeliverybyBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MapDeliverybyBatch(string empname, string empid, string AddressID, string Categoryid, string pins, string userkey, string uid) {
            object[] results = this.Invoke("MapDeliverybyBatch", new object[] {
                        empname,
                        empid,
                        AddressID,
                        Categoryid,
                        pins,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MapDeliverybyBatchAsync(string empname, string empid, string AddressID, string Categoryid, string pins, string userkey, string uid) {
            this.MapDeliverybyBatchAsync(empname, empid, AddressID, Categoryid, pins, userkey, uid, null);
        }
        
        /// <remarks/>
        public void MapDeliverybyBatchAsync(string empname, string empid, string AddressID, string Categoryid, string pins, string userkey, string uid, object userState) {
            if ((this.MapDeliverybyBatchOperationCompleted == null)) {
                this.MapDeliverybyBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapDeliverybyBatchOperationCompleted);
            }
            this.InvokeAsync("MapDeliverybyBatch", new object[] {
                        empname,
                        empid,
                        AddressID,
                        Categoryid,
                        pins,
                        userkey,
                        uid}, this.MapDeliverybyBatchOperationCompleted, userState);
        }
        
        private void OnMapDeliverybyBatchOperationCompleted(object arg) {
            if ((this.MapDeliverybyBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapDeliverybyBatchCompleted(this, new MapDeliverybyBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MapDeliverybyEmployer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MapDeliverybyEmployer(string empname, string empid, string contactname1, string contactname2, string contact1phone, string contact2phone, string deladdr1, string deladdr2, string userkey, string uid) {
            object[] results = this.Invoke("MapDeliverybyEmployer", new object[] {
                        empname,
                        empid,
                        contactname1,
                        contactname2,
                        contact1phone,
                        contact2phone,
                        deladdr1,
                        deladdr2,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MapDeliverybyEmployerAsync(string empname, string empid, string contactname1, string contactname2, string contact1phone, string contact2phone, string deladdr1, string deladdr2, string userkey, string uid) {
            this.MapDeliverybyEmployerAsync(empname, empid, contactname1, contactname2, contact1phone, contact2phone, deladdr1, deladdr2, userkey, uid, null);
        }
        
        /// <remarks/>
        public void MapDeliverybyEmployerAsync(string empname, string empid, string contactname1, string contactname2, string contact1phone, string contact2phone, string deladdr1, string deladdr2, string userkey, string uid, object userState) {
            if ((this.MapDeliverybyEmployerOperationCompleted == null)) {
                this.MapDeliverybyEmployerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapDeliverybyEmployerOperationCompleted);
            }
            this.InvokeAsync("MapDeliverybyEmployer", new object[] {
                        empname,
                        empid,
                        contactname1,
                        contactname2,
                        contact1phone,
                        contact2phone,
                        deladdr1,
                        deladdr2,
                        userkey,
                        uid}, this.MapDeliverybyEmployerOperationCompleted, userState);
        }
        
        private void OnMapDeliverybyEmployerOperationCompleted(object arg) {
            if ((this.MapDeliverybyEmployerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapDeliverybyEmployerCompleted(this, new MapDeliverybyEmployerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchStatementEmployerBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchStatementEmployerBatch(string empname, string empid, string userkey, string uid) {
            object[] results = this.Invoke("FetchStatementEmployerBatch", new object[] {
                        empname,
                        empid,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchStatementEmployerBatchAsync(string empname, string empid, string userkey, string uid) {
            this.FetchStatementEmployerBatchAsync(empname, empid, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchStatementEmployerBatchAsync(string empname, string empid, string userkey, string uid, object userState) {
            if ((this.FetchStatementEmployerBatchOperationCompleted == null)) {
                this.FetchStatementEmployerBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchStatementEmployerBatchOperationCompleted);
            }
            this.InvokeAsync("FetchStatementEmployerBatch", new object[] {
                        empname,
                        empid,
                        userkey,
                        uid}, this.FetchStatementEmployerBatchOperationCompleted, userState);
        }
        
        private void OnFetchStatementEmployerBatchOperationCompleted(object arg) {
            if ((this.FetchStatementEmployerBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchStatementEmployerBatchCompleted(this, new FetchStatementEmployerBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchPINsBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchPINsBatch(string empname, string empid, string BatchID, string ADDID, string userkey, string uid) {
            object[] results = this.Invoke("FetchPINsBatch", new object[] {
                        empname,
                        empid,
                        BatchID,
                        ADDID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchPINsBatchAsync(string empname, string empid, string BatchID, string ADDID, string userkey, string uid) {
            this.FetchPINsBatchAsync(empname, empid, BatchID, ADDID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchPINsBatchAsync(string empname, string empid, string BatchID, string ADDID, string userkey, string uid, object userState) {
            if ((this.FetchPINsBatchOperationCompleted == null)) {
                this.FetchPINsBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchPINsBatchOperationCompleted);
            }
            this.InvokeAsync("FetchPINsBatch", new object[] {
                        empname,
                        empid,
                        BatchID,
                        ADDID,
                        userkey,
                        uid}, this.FetchPINsBatchOperationCompleted, userState);
        }
        
        private void OnFetchPINsBatchOperationCompleted(object arg) {
            if ((this.FetchPINsBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchPINsBatchCompleted(this, new FetchPINsBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateStatementEmployerBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateStatementEmployerBatch(string BatchName, string EmpName, string EmpID, string DeliveryAddline1, string DeliveryAddline2, string LGA, string sta, string recipient1name, string recipient1phone, string recipient2name, string recipient2phone, string userkey, string uid) {
            object[] results = this.Invoke("CreateStatementEmployerBatch", new object[] {
                        BatchName,
                        EmpName,
                        EmpID,
                        DeliveryAddline1,
                        DeliveryAddline2,
                        LGA,
                        sta,
                        recipient1name,
                        recipient1phone,
                        recipient2name,
                        recipient2phone,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateStatementEmployerBatchAsync(string BatchName, string EmpName, string EmpID, string DeliveryAddline1, string DeliveryAddline2, string LGA, string sta, string recipient1name, string recipient1phone, string recipient2name, string recipient2phone, string userkey, string uid) {
            this.CreateStatementEmployerBatchAsync(BatchName, EmpName, EmpID, DeliveryAddline1, DeliveryAddline2, LGA, sta, recipient1name, recipient1phone, recipient2name, recipient2phone, userkey, uid, null);
        }
        
        /// <remarks/>
        public void CreateStatementEmployerBatchAsync(string BatchName, string EmpName, string EmpID, string DeliveryAddline1, string DeliveryAddline2, string LGA, string sta, string recipient1name, string recipient1phone, string recipient2name, string recipient2phone, string userkey, string uid, object userState) {
            if ((this.CreateStatementEmployerBatchOperationCompleted == null)) {
                this.CreateStatementEmployerBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateStatementEmployerBatchOperationCompleted);
            }
            this.InvokeAsync("CreateStatementEmployerBatch", new object[] {
                        BatchName,
                        EmpName,
                        EmpID,
                        DeliveryAddline1,
                        DeliveryAddline2,
                        LGA,
                        sta,
                        recipient1name,
                        recipient1phone,
                        recipient2name,
                        recipient2phone,
                        userkey,
                        uid}, this.CreateStatementEmployerBatchOperationCompleted, userState);
        }
        
        private void OnCreateStatementEmployerBatchOperationCompleted(object arg) {
            if ((this.CreateStatementEmployerBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateStatementEmployerBatchCompleted(this, new CreateStatementEmployerBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateRole", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateRole(string RoleName, string CreatorID, string userkey, string uid) {
            object[] results = this.Invoke("CreateRole", new object[] {
                        RoleName,
                        CreatorID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string RoleName, string CreatorID, string userkey, string uid) {
            this.CreateRoleAsync(RoleName, CreatorID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string RoleName, string CreatorID, string userkey, string uid, object userState) {
            if ((this.CreateRoleOperationCompleted == null)) {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRoleOperationCompleted);
            }
            this.InvokeAsync("CreateRole", new object[] {
                        RoleName,
                        CreatorID,
                        userkey,
                        uid}, this.CreateRoleOperationCompleted, userState);
        }
        
        private void OnCreateRoleOperationCompleted(object arg) {
            if ((this.CreateRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRoleCompleted(this, new CreateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogRequestDoc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogRequestDoc(string RequestID, string HistoryID, string Doc, string Docext, string Docname, string IsOriginal, string userkey, string uid) {
            object[] results = this.Invoke("LogRequestDoc", new object[] {
                        RequestID,
                        HistoryID,
                        Doc,
                        Docext,
                        Docname,
                        IsOriginal,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogRequestDocAsync(string RequestID, string HistoryID, string Doc, string Docext, string Docname, string IsOriginal, string userkey, string uid) {
            this.LogRequestDocAsync(RequestID, HistoryID, Doc, Docext, Docname, IsOriginal, userkey, uid, null);
        }
        
        /// <remarks/>
        public void LogRequestDocAsync(string RequestID, string HistoryID, string Doc, string Docext, string Docname, string IsOriginal, string userkey, string uid, object userState) {
            if ((this.LogRequestDocOperationCompleted == null)) {
                this.LogRequestDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogRequestDocOperationCompleted);
            }
            this.InvokeAsync("LogRequestDoc", new object[] {
                        RequestID,
                        HistoryID,
                        Doc,
                        Docext,
                        Docname,
                        IsOriginal,
                        userkey,
                        uid}, this.LogRequestDocOperationCompleted, userState);
        }
        
        private void OnLogRequestDocOperationCompleted(object arg) {
            if ((this.LogRequestDocCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogRequestDocCompleted(this, new LogRequestDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateRequest(string CreatorID, string CreatorRoleID, string RequestCat, string CurrentStatus, string Comment, string userkey, string uid) {
            object[] results = this.Invoke("CreateRequest", new object[] {
                        CreatorID,
                        CreatorRoleID,
                        RequestCat,
                        CurrentStatus,
                        Comment,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRequestAsync(string CreatorID, string CreatorRoleID, string RequestCat, string CurrentStatus, string Comment, string userkey, string uid) {
            this.CreateRequestAsync(CreatorID, CreatorRoleID, RequestCat, CurrentStatus, Comment, userkey, uid, null);
        }
        
        /// <remarks/>
        public void CreateRequestAsync(string CreatorID, string CreatorRoleID, string RequestCat, string CurrentStatus, string Comment, string userkey, string uid, object userState) {
            if ((this.CreateRequestOperationCompleted == null)) {
                this.CreateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRequestOperationCompleted);
            }
            this.InvokeAsync("CreateRequest", new object[] {
                        CreatorID,
                        CreatorRoleID,
                        RequestCat,
                        CurrentStatus,
                        Comment,
                        userkey,
                        uid}, this.CreateRequestOperationCompleted, userState);
        }
        
        private void OnCreateRequestOperationCompleted(object arg) {
            if ((this.CreateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRequestCompleted(this, new CreateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Gbasi", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Gbasi() {
            this.Invoke("Gbasi", new object[0]);
        }
        
        /// <remarks/>
        public void GbasiAsync() {
            this.GbasiAsync(null);
        }
        
        /// <remarks/>
        public void GbasiAsync(object userState) {
            if ((this.GbasiOperationCompleted == null)) {
                this.GbasiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGbasiOperationCompleted);
            }
            this.InvokeAsync("Gbasi", new object[0], this.GbasiOperationCompleted, userState);
        }
        
        private void OnGbasiOperationCompleted(object arg) {
            if ((this.GbasiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GbasiCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NotifyIncident", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NotifyIncident(string RequestID, string userkey, string uid) {
            object[] results = this.Invoke("NotifyIncident", new object[] {
                        RequestID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NotifyIncidentAsync(string RequestID, string userkey, string uid) {
            this.NotifyIncidentAsync(RequestID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void NotifyIncidentAsync(string RequestID, string userkey, string uid, object userState) {
            if ((this.NotifyIncidentOperationCompleted == null)) {
                this.NotifyIncidentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNotifyIncidentOperationCompleted);
            }
            this.InvokeAsync("NotifyIncident", new object[] {
                        RequestID,
                        userkey,
                        uid}, this.NotifyIncidentOperationCompleted, userState);
        }
        
        private void OnNotifyIncidentOperationCompleted(object arg) {
            if ((this.NotifyIncidentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NotifyIncidentCompleted(this, new NotifyIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IncidentNotifier", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IncidentNotifier(string RequestID, string RequesterName, string groupemail, string Reqemail, string comment) {
            object[] results = this.Invoke("IncidentNotifier", new object[] {
                        RequestID,
                        RequesterName,
                        groupemail,
                        Reqemail,
                        comment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IncidentNotifierAsync(string RequestID, string RequesterName, string groupemail, string Reqemail, string comment) {
            this.IncidentNotifierAsync(RequestID, RequesterName, groupemail, Reqemail, comment, null);
        }
        
        /// <remarks/>
        public void IncidentNotifierAsync(string RequestID, string RequesterName, string groupemail, string Reqemail, string comment, object userState) {
            if ((this.IncidentNotifierOperationCompleted == null)) {
                this.IncidentNotifierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncidentNotifierOperationCompleted);
            }
            this.InvokeAsync("IncidentNotifier", new object[] {
                        RequestID,
                        RequesterName,
                        groupemail,
                        Reqemail,
                        comment}, this.IncidentNotifierOperationCompleted, userState);
        }
        
        private void OnIncidentNotifierOperationCompleted(object arg) {
            if ((this.IncidentNotifierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncidentNotifierCompleted(this, new IncidentNotifierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AssignRequest(string RequestID, string Comment, string AssignedByID, string AssignedByIDtype, string AssignedToIDtype, string AssignedToID, string AssignStatus, string userkey, string uid) {
            object[] results = this.Invoke("AssignRequest", new object[] {
                        RequestID,
                        Comment,
                        AssignedByID,
                        AssignedByIDtype,
                        AssignedToIDtype,
                        AssignedToID,
                        AssignStatus,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AssignRequestAsync(string RequestID, string Comment, string AssignedByID, string AssignedByIDtype, string AssignedToIDtype, string AssignedToID, string AssignStatus, string userkey, string uid) {
            this.AssignRequestAsync(RequestID, Comment, AssignedByID, AssignedByIDtype, AssignedToIDtype, AssignedToID, AssignStatus, userkey, uid, null);
        }
        
        /// <remarks/>
        public void AssignRequestAsync(string RequestID, string Comment, string AssignedByID, string AssignedByIDtype, string AssignedToIDtype, string AssignedToID, string AssignStatus, string userkey, string uid, object userState) {
            if ((this.AssignRequestOperationCompleted == null)) {
                this.AssignRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignRequestOperationCompleted);
            }
            this.InvokeAsync("AssignRequest", new object[] {
                        RequestID,
                        Comment,
                        AssignedByID,
                        AssignedByIDtype,
                        AssignedToIDtype,
                        AssignedToID,
                        AssignStatus,
                        userkey,
                        uid}, this.AssignRequestOperationCompleted, userState);
        }
        
        private void OnAssignRequestOperationCompleted(object arg) {
            if ((this.AssignRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignRequestCompleted(this, new AssignRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DefineView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DefineView(string MenuName, string Controller, string Action, string CreatorID, string userkey, string uid) {
            object[] results = this.Invoke("DefineView", new object[] {
                        MenuName,
                        Controller,
                        Action,
                        CreatorID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DefineViewAsync(string MenuName, string Controller, string Action, string CreatorID, string userkey, string uid) {
            this.DefineViewAsync(MenuName, Controller, Action, CreatorID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void DefineViewAsync(string MenuName, string Controller, string Action, string CreatorID, string userkey, string uid, object userState) {
            if ((this.DefineViewOperationCompleted == null)) {
                this.DefineViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDefineViewOperationCompleted);
            }
            this.InvokeAsync("DefineView", new object[] {
                        MenuName,
                        Controller,
                        Action,
                        CreatorID,
                        userkey,
                        uid}, this.DefineViewOperationCompleted, userState);
        }
        
        private void OnDefineViewOperationCompleted(object arg) {
            if ((this.DefineViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DefineViewCompleted(this, new DefineViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnMapRoleView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UnMapRoleView(string MappingID, string StaffID, string userkey, string uid) {
            object[] results = this.Invoke("UnMapRoleView", new object[] {
                        MappingID,
                        StaffID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnMapRoleViewAsync(string MappingID, string StaffID, string userkey, string uid) {
            this.UnMapRoleViewAsync(MappingID, StaffID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void UnMapRoleViewAsync(string MappingID, string StaffID, string userkey, string uid, object userState) {
            if ((this.UnMapRoleViewOperationCompleted == null)) {
                this.UnMapRoleViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnMapRoleViewOperationCompleted);
            }
            this.InvokeAsync("UnMapRoleView", new object[] {
                        MappingID,
                        StaffID,
                        userkey,
                        uid}, this.UnMapRoleViewOperationCompleted, userState);
        }
        
        private void OnUnMapRoleViewOperationCompleted(object arg) {
            if ((this.UnMapRoleViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnMapRoleViewCompleted(this, new UnMapRoleViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MapRoleView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MapRoleView(string MenuID, string ParentMenuID, string RoleID, string CreatorID, string userkey, string uid) {
            object[] results = this.Invoke("MapRoleView", new object[] {
                        MenuID,
                        ParentMenuID,
                        RoleID,
                        CreatorID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MapRoleViewAsync(string MenuID, string ParentMenuID, string RoleID, string CreatorID, string userkey, string uid) {
            this.MapRoleViewAsync(MenuID, ParentMenuID, RoleID, CreatorID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void MapRoleViewAsync(string MenuID, string ParentMenuID, string RoleID, string CreatorID, string userkey, string uid, object userState) {
            if ((this.MapRoleViewOperationCompleted == null)) {
                this.MapRoleViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapRoleViewOperationCompleted);
            }
            this.InvokeAsync("MapRoleView", new object[] {
                        MenuID,
                        ParentMenuID,
                        RoleID,
                        CreatorID,
                        userkey,
                        uid}, this.MapRoleViewOperationCompleted, userState);
        }
        
        private void OnMapRoleViewOperationCompleted(object arg) {
            if ((this.MapRoleViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapRoleViewCompleted(this, new MapRoleViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchViews", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchViews(string userkey, string uid) {
            object[] results = this.Invoke("FetchViews", new object[] {
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchViewsAsync(string userkey, string uid) {
            this.FetchViewsAsync(userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchViewsAsync(string userkey, string uid, object userState) {
            if ((this.FetchViewsOperationCompleted == null)) {
                this.FetchViewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchViewsOperationCompleted);
            }
            this.InvokeAsync("FetchViews", new object[] {
                        userkey,
                        uid}, this.FetchViewsOperationCompleted, userState);
        }
        
        private void OnFetchViewsOperationCompleted(object arg) {
            if ((this.FetchViewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchViewsCompleted(this, new FetchViewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchRequestCategories", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchRequestCategories(string RoleID, string userkey, string uid) {
            object[] results = this.Invoke("FetchRequestCategories", new object[] {
                        RoleID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchRequestCategoriesAsync(string RoleID, string userkey, string uid) {
            this.FetchRequestCategoriesAsync(RoleID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchRequestCategoriesAsync(string RoleID, string userkey, string uid, object userState) {
            if ((this.FetchRequestCategoriesOperationCompleted == null)) {
                this.FetchRequestCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchRequestCategoriesOperationCompleted);
            }
            this.InvokeAsync("FetchRequestCategories", new object[] {
                        RoleID,
                        userkey,
                        uid}, this.FetchRequestCategoriesOperationCompleted, userState);
        }
        
        private void OnFetchRequestCategoriesOperationCompleted(object arg) {
            if ((this.FetchRequestCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchRequestCategoriesCompleted(this, new FetchRequestCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchIncidents", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchIncidents(string FetchType, string Val1, string Val2, string userkey, string uid) {
            object[] results = this.Invoke("FetchIncidents", new object[] {
                        FetchType,
                        Val1,
                        Val2,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchIncidentsAsync(string FetchType, string Val1, string Val2, string userkey, string uid) {
            this.FetchIncidentsAsync(FetchType, Val1, Val2, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchIncidentsAsync(string FetchType, string Val1, string Val2, string userkey, string uid, object userState) {
            if ((this.FetchIncidentsOperationCompleted == null)) {
                this.FetchIncidentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchIncidentsOperationCompleted);
            }
            this.InvokeAsync("FetchIncidents", new object[] {
                        FetchType,
                        Val1,
                        Val2,
                        userkey,
                        uid}, this.FetchIncidentsOperationCompleted, userState);
        }
        
        private void OnFetchIncidentsOperationCompleted(object arg) {
            if ((this.FetchIncidentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchIncidentsCompleted(this, new FetchIncidentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchRoleView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchRoleView(string RoleID, string userkey, string uid) {
            object[] results = this.Invoke("FetchRoleView", new object[] {
                        RoleID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchRoleViewAsync(string RoleID, string userkey, string uid) {
            this.FetchRoleViewAsync(RoleID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchRoleViewAsync(string RoleID, string userkey, string uid, object userState) {
            if ((this.FetchRoleViewOperationCompleted == null)) {
                this.FetchRoleViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchRoleViewOperationCompleted);
            }
            this.InvokeAsync("FetchRoleView", new object[] {
                        RoleID,
                        userkey,
                        uid}, this.FetchRoleViewOperationCompleted, userState);
        }
        
        private void OnFetchRoleViewOperationCompleted(object arg) {
            if ((this.FetchRoleViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchRoleViewCompleted(this, new FetchRoleViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchInternalUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchInternalUsers(string userkey, string uid) {
            object[] results = this.Invoke("FetchInternalUsers", new object[] {
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchInternalUsersAsync(string userkey, string uid) {
            this.FetchInternalUsersAsync(userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchInternalUsersAsync(string userkey, string uid, object userState) {
            if ((this.FetchInternalUsersOperationCompleted == null)) {
                this.FetchInternalUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchInternalUsersOperationCompleted);
            }
            this.InvokeAsync("FetchInternalUsers", new object[] {
                        userkey,
                        uid}, this.FetchInternalUsersOperationCompleted, userState);
        }
        
        private void OnFetchInternalUsersOperationCompleted(object arg) {
            if ((this.FetchInternalUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchInternalUsersCompleted(this, new FetchInternalUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchExternalUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchExternalUsers(bool bycompany, string EmployerID, string userkey, string uid) {
            object[] results = this.Invoke("FetchExternalUsers", new object[] {
                        bycompany,
                        EmployerID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchExternalUsersAsync(bool bycompany, string EmployerID, string userkey, string uid) {
            this.FetchExternalUsersAsync(bycompany, EmployerID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchExternalUsersAsync(bool bycompany, string EmployerID, string userkey, string uid, object userState) {
            if ((this.FetchExternalUsersOperationCompleted == null)) {
                this.FetchExternalUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchExternalUsersOperationCompleted);
            }
            this.InvokeAsync("FetchExternalUsers", new object[] {
                        bycompany,
                        EmployerID,
                        userkey,
                        uid}, this.FetchExternalUsersOperationCompleted, userState);
        }
        
        private void OnFetchExternalUsersOperationCompleted(object arg) {
            if ((this.FetchExternalUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchExternalUsersCompleted(this, new FetchExternalUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ADAuth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ADAuth(string SapID, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid) {
            object[] results = this.Invoke("ADAuth", new object[] {
                        SapID,
                        BrowserUsed,
                        ipaddress,
                        windowsuser,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ADAuthAsync(string SapID, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid) {
            this.ADAuthAsync(SapID, BrowserUsed, ipaddress, windowsuser, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ADAuthAsync(string SapID, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid, object userState) {
            if ((this.ADAuthOperationCompleted == null)) {
                this.ADAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnADAuthOperationCompleted);
            }
            this.InvokeAsync("ADAuth", new object[] {
                        SapID,
                        BrowserUsed,
                        ipaddress,
                        windowsuser,
                        userkey,
                        uid}, this.ADAuthOperationCompleted, userState);
        }
        
        private void OnADAuthOperationCompleted(object arg) {
            if ((this.ADAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ADAuthCompleted(this, new ADAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Report_CFI_Status_Report_By_Employer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Report_CFI_Status_Report_By_Employer(string EmployerID, string reporttype, string userkey, string uid, string src) {
            object[] results = this.Invoke("Report_CFI_Status_Report_By_Employer", new object[] {
                        EmployerID,
                        reporttype,
                        userkey,
                        uid,
                        src});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Report_CFI_Status_Report_By_EmployerAsync(string EmployerID, string reporttype, string userkey, string uid, string src) {
            this.Report_CFI_Status_Report_By_EmployerAsync(EmployerID, reporttype, userkey, uid, src, null);
        }
        
        /// <remarks/>
        public void Report_CFI_Status_Report_By_EmployerAsync(string EmployerID, string reporttype, string userkey, string uid, string src, object userState) {
            if ((this.Report_CFI_Status_Report_By_EmployerOperationCompleted == null)) {
                this.Report_CFI_Status_Report_By_EmployerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReport_CFI_Status_Report_By_EmployerOperationCompleted);
            }
            this.InvokeAsync("Report_CFI_Status_Report_By_Employer", new object[] {
                        EmployerID,
                        reporttype,
                        userkey,
                        uid,
                        src}, this.Report_CFI_Status_Report_By_EmployerOperationCompleted, userState);
        }
        
        private void OnReport_CFI_Status_Report_By_EmployerOperationCompleted(object arg) {
            if ((this.Report_CFI_Status_Report_By_EmployerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Report_CFI_Status_Report_By_EmployerCompleted(this, new Report_CFI_Status_Report_By_EmployerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Report_Pencom_Employer_Code", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Report_Pencom_Employer_Code(string EmployerID, string reporttype, string userkey, string uid, string src) {
            object[] results = this.Invoke("Report_Pencom_Employer_Code", new object[] {
                        EmployerID,
                        reporttype,
                        userkey,
                        uid,
                        src});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Report_Pencom_Employer_CodeAsync(string EmployerID, string reporttype, string userkey, string uid, string src) {
            this.Report_Pencom_Employer_CodeAsync(EmployerID, reporttype, userkey, uid, src, null);
        }
        
        /// <remarks/>
        public void Report_Pencom_Employer_CodeAsync(string EmployerID, string reporttype, string userkey, string uid, string src, object userState) {
            if ((this.Report_Pencom_Employer_CodeOperationCompleted == null)) {
                this.Report_Pencom_Employer_CodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReport_Pencom_Employer_CodeOperationCompleted);
            }
            this.InvokeAsync("Report_Pencom_Employer_Code", new object[] {
                        EmployerID,
                        reporttype,
                        userkey,
                        uid,
                        src}, this.Report_Pencom_Employer_CodeOperationCompleted, userState);
        }
        
        private void OnReport_Pencom_Employer_CodeOperationCompleted(object arg) {
            if ((this.Report_Pencom_Employer_CodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Report_Pencom_Employer_CodeCompleted(this, new Report_Pencom_Employer_CodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Report_RSA_Details_by_employer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Report_RSA_Details_by_employer(string EmployerName, string reporttype, string userkey, string uid, string src) {
            object[] results = this.Invoke("Report_RSA_Details_by_employer", new object[] {
                        EmployerName,
                        reporttype,
                        userkey,
                        uid,
                        src});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Report_RSA_Details_by_employerAsync(string EmployerName, string reporttype, string userkey, string uid, string src) {
            this.Report_RSA_Details_by_employerAsync(EmployerName, reporttype, userkey, uid, src, null);
        }
        
        /// <remarks/>
        public void Report_RSA_Details_by_employerAsync(string EmployerName, string reporttype, string userkey, string uid, string src, object userState) {
            if ((this.Report_RSA_Details_by_employerOperationCompleted == null)) {
                this.Report_RSA_Details_by_employerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReport_RSA_Details_by_employerOperationCompleted);
            }
            this.InvokeAsync("Report_RSA_Details_by_employer", new object[] {
                        EmployerName,
                        reporttype,
                        userkey,
                        uid,
                        src}, this.Report_RSA_Details_by_employerOperationCompleted, userState);
        }
        
        private void OnReport_RSA_Details_by_employerOperationCompleted(object arg) {
            if ((this.Report_RSA_Details_by_employerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Report_RSA_Details_by_employerCompleted(this, new Report_RSA_Details_by_employerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Report_RSA_Unfunded", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Report_RSA_Unfunded(string EmployerName, string startdate, string enddate, string reporttype, string userkey, string uid, string src) {
            object[] results = this.Invoke("Report_RSA_Unfunded", new object[] {
                        EmployerName,
                        startdate,
                        enddate,
                        reporttype,
                        userkey,
                        uid,
                        src});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Report_RSA_UnfundedAsync(string EmployerName, string startdate, string enddate, string reporttype, string userkey, string uid, string src) {
            this.Report_RSA_UnfundedAsync(EmployerName, startdate, enddate, reporttype, userkey, uid, src, null);
        }
        
        /// <remarks/>
        public void Report_RSA_UnfundedAsync(string EmployerName, string startdate, string enddate, string reporttype, string userkey, string uid, string src, object userState) {
            if ((this.Report_RSA_UnfundedOperationCompleted == null)) {
                this.Report_RSA_UnfundedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReport_RSA_UnfundedOperationCompleted);
            }
            this.InvokeAsync("Report_RSA_Unfunded", new object[] {
                        EmployerName,
                        startdate,
                        enddate,
                        reporttype,
                        userkey,
                        uid,
                        src}, this.Report_RSA_UnfundedOperationCompleted, userState);
        }
        
        private void OnReport_RSA_UnfundedOperationCompleted(object arg) {
            if ((this.Report_RSA_UnfundedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Report_RSA_UnfundedCompleted(this, new Report_RSA_UnfundedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LOGIN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LOGIN(string SapID, string pass, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid) {
            object[] results = this.Invoke("LOGIN", new object[] {
                        SapID,
                        pass,
                        BrowserUsed,
                        ipaddress,
                        windowsuser,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LOGINAsync(string SapID, string pass, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid) {
            this.LOGINAsync(SapID, pass, BrowserUsed, ipaddress, windowsuser, userkey, uid, null);
        }
        
        /// <remarks/>
        public void LOGINAsync(string SapID, string pass, string BrowserUsed, string ipaddress, string windowsuser, string userkey, string uid, object userState) {
            if ((this.LOGINOperationCompleted == null)) {
                this.LOGINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLOGINOperationCompleted);
            }
            this.InvokeAsync("LOGIN", new object[] {
                        SapID,
                        pass,
                        BrowserUsed,
                        ipaddress,
                        windowsuser,
                        userkey,
                        uid}, this.LOGINOperationCompleted, userState);
        }
        
        private void OnLOGINOperationCompleted(object arg) {
            if ((this.LOGINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LOGINCompleted(this, new LOGINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchCompanYEmployees", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchCompanYEmployees(string EmpID, string userkey, string uid) {
            object[] results = this.Invoke("FetchCompanYEmployees", new object[] {
                        EmpID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchCompanYEmployeesAsync(string EmpID, string userkey, string uid) {
            this.FetchCompanYEmployeesAsync(EmpID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchCompanYEmployeesAsync(string EmpID, string userkey, string uid, object userState) {
            if ((this.FetchCompanYEmployeesOperationCompleted == null)) {
                this.FetchCompanYEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchCompanYEmployeesOperationCompleted);
            }
            this.InvokeAsync("FetchCompanYEmployees", new object[] {
                        EmpID,
                        userkey,
                        uid}, this.FetchCompanYEmployeesOperationCompleted, userState);
        }
        
        private void OnFetchCompanYEmployeesOperationCompleted(object arg) {
            if ((this.FetchCompanYEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchCompanYEmployeesCompleted(this, new FetchCompanYEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchAssignmentHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchAssignmentHistory(string RequestID, string userkey, string uid) {
            object[] results = this.Invoke("FetchAssignmentHistory", new object[] {
                        RequestID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchAssignmentHistoryAsync(string RequestID, string userkey, string uid) {
            this.FetchAssignmentHistoryAsync(RequestID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchAssignmentHistoryAsync(string RequestID, string userkey, string uid, object userState) {
            if ((this.FetchAssignmentHistoryOperationCompleted == null)) {
                this.FetchAssignmentHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchAssignmentHistoryOperationCompleted);
            }
            this.InvokeAsync("FetchAssignmentHistory", new object[] {
                        RequestID,
                        userkey,
                        uid}, this.FetchAssignmentHistoryOperationCompleted, userState);
        }
        
        private void OnFetchAssignmentHistoryOperationCompleted(object arg) {
            if ((this.FetchAssignmentHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchAssignmentHistoryCompleted(this, new FetchAssignmentHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FetchIncidentDoc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FetchIncidentDoc(string type, string val, string userkey, string uid) {
            object[] results = this.Invoke("FetchIncidentDoc", new object[] {
                        type,
                        val,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FetchIncidentDocAsync(string type, string val, string userkey, string uid) {
            this.FetchIncidentDocAsync(type, val, userkey, uid, null);
        }
        
        /// <remarks/>
        public void FetchIncidentDocAsync(string type, string val, string userkey, string uid, object userState) {
            if ((this.FetchIncidentDocOperationCompleted == null)) {
                this.FetchIncidentDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchIncidentDocOperationCompleted);
            }
            this.InvokeAsync("FetchIncidentDoc", new object[] {
                        type,
                        val,
                        userkey,
                        uid}, this.FetchIncidentDocOperationCompleted, userState);
        }
        
        private void OnFetchIncidentDocOperationCompleted(object arg) {
            if ((this.FetchIncidentDocCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchIncidentDocCompleted(this, new FetchIncidentDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Getaudittrail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Getaudittrail(string RequesterSAPID, string userkey, string uid) {
            object[] results = this.Invoke("Getaudittrail", new object[] {
                        RequesterSAPID,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetaudittrailAsync(string RequesterSAPID, string userkey, string uid) {
            this.GetaudittrailAsync(RequesterSAPID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void GetaudittrailAsync(string RequesterSAPID, string userkey, string uid, object userState) {
            if ((this.GetaudittrailOperationCompleted == null)) {
                this.GetaudittrailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetaudittrailOperationCompleted);
            }
            this.InvokeAsync("Getaudittrail", new object[] {
                        RequesterSAPID,
                        userkey,
                        uid}, this.GetaudittrailOperationCompleted, userState);
        }
        
        private void OnGetaudittrailOperationCompleted(object arg) {
            if ((this.GetaudittrailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetaudittrailCompleted(this, new GetaudittrailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LogError(string RecordID, string RecordID2, string RecordID3, string Section, string Section2, string Section3, string Description, string Verbose, int Status) {
            object[] results = this.Invoke("LogError", new object[] {
                        RecordID,
                        RecordID2,
                        RecordID3,
                        Section,
                        Section2,
                        Section3,
                        Description,
                        Verbose,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogErrorAsync(string RecordID, string RecordID2, string RecordID3, string Section, string Section2, string Section3, string Description, string Verbose, int Status) {
            this.LogErrorAsync(RecordID, RecordID2, RecordID3, Section, Section2, Section3, Description, Verbose, Status, null);
        }
        
        /// <remarks/>
        public void LogErrorAsync(string RecordID, string RecordID2, string RecordID3, string Section, string Section2, string Section3, string Description, string Verbose, int Status, object userState) {
            if ((this.LogErrorOperationCompleted == null)) {
                this.LogErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogErrorOperationCompleted);
            }
            this.InvokeAsync("LogError", new object[] {
                        RecordID,
                        RecordID2,
                        RecordID3,
                        Section,
                        Section2,
                        Section3,
                        Description,
                        Verbose,
                        Status}, this.LogErrorOperationCompleted, userState);
        }
        
        private void OnLogErrorOperationCompleted(object arg) {
            if ((this.LogErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogErrorCompleted(this, new LogErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ModifyExternalUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ModifyExternalUser(string EmployerID, string custodianID, string Email, string fullname, string Phone, string CreatorId, string Role, int WEBUSERID, string userkey, string uid) {
            object[] results = this.Invoke("ModifyExternalUser", new object[] {
                        EmployerID,
                        custodianID,
                        Email,
                        fullname,
                        Phone,
                        CreatorId,
                        Role,
                        WEBUSERID,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ModifyExternalUserAsync(string EmployerID, string custodianID, string Email, string fullname, string Phone, string CreatorId, string Role, int WEBUSERID, string userkey, string uid) {
            this.ModifyExternalUserAsync(EmployerID, custodianID, Email, fullname, Phone, CreatorId, Role, WEBUSERID, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ModifyExternalUserAsync(string EmployerID, string custodianID, string Email, string fullname, string Phone, string CreatorId, string Role, int WEBUSERID, string userkey, string uid, object userState) {
            if ((this.ModifyExternalUserOperationCompleted == null)) {
                this.ModifyExternalUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyExternalUserOperationCompleted);
            }
            this.InvokeAsync("ModifyExternalUser", new object[] {
                        EmployerID,
                        custodianID,
                        Email,
                        fullname,
                        Phone,
                        CreatorId,
                        Role,
                        WEBUSERID,
                        userkey,
                        uid}, this.ModifyExternalUserOperationCompleted, userState);
        }
        
        private void OnModifyExternalUserOperationCompleted(object arg) {
            if ((this.ModifyExternalUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyExternalUserCompleted(this, new ModifyExternalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdministerExternalUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdministerExternalUser(string EmployerID, string custodianID, string Email, string fullname, string Phone, string CreatorId, string Role, string Type, string userkey, string uid) {
            object[] results = this.Invoke("AdministerExternalUser", new object[] {
                        EmployerID,
                        custodianID,
                        Email,
                        fullname,
                        Phone,
                        CreatorId,
                        Role,
                        Type,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdministerExternalUserAsync(string EmployerID, string custodianID, string Email, string fullname, string Phone, string CreatorId, string Role, string Type, string userkey, string uid) {
            this.AdministerExternalUserAsync(EmployerID, custodianID, Email, fullname, Phone, CreatorId, Role, Type, userkey, uid, null);
        }
        
        /// <remarks/>
        public void AdministerExternalUserAsync(string EmployerID, string custodianID, string Email, string fullname, string Phone, string CreatorId, string Role, string Type, string userkey, string uid, object userState) {
            if ((this.AdministerExternalUserOperationCompleted == null)) {
                this.AdministerExternalUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdministerExternalUserOperationCompleted);
            }
            this.InvokeAsync("AdministerExternalUser", new object[] {
                        EmployerID,
                        custodianID,
                        Email,
                        fullname,
                        Phone,
                        CreatorId,
                        Role,
                        Type,
                        userkey,
                        uid}, this.AdministerExternalUserOperationCompleted, userState);
        }
        
        private void OnAdministerExternalUserOperationCompleted(object arg) {
            if ((this.AdministerExternalUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdministerExternalUserCompleted(this, new AdministerExternalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdministerInternalUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AdministerInternalUser(string StaffID, string CreatorId, string Role, string Type, string userkey, string uid) {
            object[] results = this.Invoke("AdministerInternalUser", new object[] {
                        StaffID,
                        CreatorId,
                        Role,
                        Type,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdministerInternalUserAsync(string StaffID, string CreatorId, string Role, string Type, string userkey, string uid) {
            this.AdministerInternalUserAsync(StaffID, CreatorId, Role, Type, userkey, uid, null);
        }
        
        /// <remarks/>
        public void AdministerInternalUserAsync(string StaffID, string CreatorId, string Role, string Type, string userkey, string uid, object userState) {
            if ((this.AdministerInternalUserOperationCompleted == null)) {
                this.AdministerInternalUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdministerInternalUserOperationCompleted);
            }
            this.InvokeAsync("AdministerInternalUser", new object[] {
                        StaffID,
                        CreatorId,
                        Role,
                        Type,
                        userkey,
                        uid}, this.AdministerInternalUserOperationCompleted, userState);
        }
        
        private void OnAdministerInternalUserOperationCompleted(object arg) {
            if ((this.AdministerInternalUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdministerInternalUserCompleted(this, new AdministerInternalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ResetPassword(string LoginVal, string Logintype, string BrowserUsed, string srcchannel, string userkey, string uid) {
            object[] results = this.Invoke("ResetPassword", new object[] {
                        LoginVal,
                        Logintype,
                        BrowserUsed,
                        srcchannel,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string LoginVal, string Logintype, string BrowserUsed, string srcchannel, string userkey, string uid) {
            this.ResetPasswordAsync(LoginVal, Logintype, BrowserUsed, srcchannel, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string LoginVal, string Logintype, string BrowserUsed, string srcchannel, string userkey, string uid, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        LoginVal,
                        Logintype,
                        BrowserUsed,
                        srcchannel,
                        userkey,
                        uid}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePassword(string Changeval, string BrowserUsed, string webid, string newpassword, string SrcChannel, string userkey, string uid) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        Changeval,
                        BrowserUsed,
                        webid,
                        newpassword,
                        SrcChannel,
                        userkey,
                        uid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string Changeval, string BrowserUsed, string webid, string newpassword, string SrcChannel, string userkey, string uid) {
            this.ChangePasswordAsync(Changeval, BrowserUsed, webid, newpassword, SrcChannel, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string Changeval, string BrowserUsed, string webid, string newpassword, string SrcChannel, string userkey, string uid, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        Changeval,
                        BrowserUsed,
                        webid,
                        newpassword,
                        SrcChannel,
                        userkey,
                        uid}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExternalLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ExternalLogin(string LoginVal, string Logintype, string pword, string BrowserUsed, string SessID, string Agent, string Ipaddress, string userkey, string uid) {
            object[] results = this.Invoke("ExternalLogin", new object[] {
                        LoginVal,
                        Logintype,
                        pword,
                        BrowserUsed,
                        SessID,
                        Agent,
                        Ipaddress,
                        userkey,
                        uid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ExternalLoginAsync(string LoginVal, string Logintype, string pword, string BrowserUsed, string SessID, string Agent, string Ipaddress, string userkey, string uid) {
            this.ExternalLoginAsync(LoginVal, Logintype, pword, BrowserUsed, SessID, Agent, Ipaddress, userkey, uid, null);
        }
        
        /// <remarks/>
        public void ExternalLoginAsync(string LoginVal, string Logintype, string pword, string BrowserUsed, string SessID, string Agent, string Ipaddress, string userkey, string uid, object userState) {
            if ((this.ExternalLoginOperationCompleted == null)) {
                this.ExternalLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExternalLoginOperationCompleted);
            }
            this.InvokeAsync("ExternalLogin", new object[] {
                        LoginVal,
                        Logintype,
                        pword,
                        BrowserUsed,
                        SessID,
                        Agent,
                        Ipaddress,
                        userkey,
                        uid}, this.ExternalLoginOperationCompleted, userState);
        }
        
        private void OnExternalLoginOperationCompleted(object arg) {
            if ((this.ExternalLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExternalLoginCompleted(this, new ExternalLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchCompaniesCompletedEventHandler(object sender, FetchCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchEmployerContactCompletedEventHandler(object sender, FetchEmployerContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchEmployerContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchEmployerContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ValidateScheduleCompletedEventHandler(object sender, ValidateScheduleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ValidateNameCompletedEventHandler(object sender, ValidateNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchAllRolesCompletedEventHandler(object sender, FetchAllRolesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchAllRolesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchAllRolesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateRoleCompletedEventHandler(object sender, UpdateRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void MapDeliverybyBatchCompletedEventHandler(object sender, MapDeliverybyBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapDeliverybyBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapDeliverybyBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void MapDeliverybyEmployerCompletedEventHandler(object sender, MapDeliverybyEmployerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapDeliverybyEmployerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapDeliverybyEmployerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchStatementEmployerBatchCompletedEventHandler(object sender, FetchStatementEmployerBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchStatementEmployerBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchStatementEmployerBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchPINsBatchCompletedEventHandler(object sender, FetchPINsBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchPINsBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchPINsBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateStatementEmployerBatchCompletedEventHandler(object sender, CreateStatementEmployerBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateStatementEmployerBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateStatementEmployerBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateRoleCompletedEventHandler(object sender, CreateRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogRequestDocCompletedEventHandler(object sender, LogRequestDocCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogRequestDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogRequestDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateRequestCompletedEventHandler(object sender, CreateRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GbasiCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void NotifyIncidentCompletedEventHandler(object sender, NotifyIncidentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NotifyIncidentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NotifyIncidentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void IncidentNotifierCompletedEventHandler(object sender, IncidentNotifierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IncidentNotifierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IncidentNotifierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AssignRequestCompletedEventHandler(object sender, AssignRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DefineViewCompletedEventHandler(object sender, DefineViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DefineViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DefineViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UnMapRoleViewCompletedEventHandler(object sender, UnMapRoleViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnMapRoleViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnMapRoleViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void MapRoleViewCompletedEventHandler(object sender, MapRoleViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapRoleViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapRoleViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchViewsCompletedEventHandler(object sender, FetchViewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchViewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchViewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchRequestCategoriesCompletedEventHandler(object sender, FetchRequestCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchRequestCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchRequestCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchIncidentsCompletedEventHandler(object sender, FetchIncidentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchIncidentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchIncidentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchRoleViewCompletedEventHandler(object sender, FetchRoleViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchRoleViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchRoleViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchInternalUsersCompletedEventHandler(object sender, FetchInternalUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchInternalUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchInternalUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchExternalUsersCompletedEventHandler(object sender, FetchExternalUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchExternalUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchExternalUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ADAuthCompletedEventHandler(object sender, ADAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ADAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ADAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void Report_CFI_Status_Report_By_EmployerCompletedEventHandler(object sender, Report_CFI_Status_Report_By_EmployerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Report_CFI_Status_Report_By_EmployerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Report_CFI_Status_Report_By_EmployerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void Report_Pencom_Employer_CodeCompletedEventHandler(object sender, Report_Pencom_Employer_CodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Report_Pencom_Employer_CodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Report_Pencom_Employer_CodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void Report_RSA_Details_by_employerCompletedEventHandler(object sender, Report_RSA_Details_by_employerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Report_RSA_Details_by_employerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Report_RSA_Details_by_employerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void Report_RSA_UnfundedCompletedEventHandler(object sender, Report_RSA_UnfundedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Report_RSA_UnfundedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Report_RSA_UnfundedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LOGINCompletedEventHandler(object sender, LOGINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LOGINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LOGINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchCompanYEmployeesCompletedEventHandler(object sender, FetchCompanYEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchCompanYEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchCompanYEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchAssignmentHistoryCompletedEventHandler(object sender, FetchAssignmentHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchAssignmentHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchAssignmentHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void FetchIncidentDocCompletedEventHandler(object sender, FetchIncidentDocCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchIncidentDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchIncidentDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetaudittrailCompletedEventHandler(object sender, GetaudittrailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetaudittrailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetaudittrailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LogErrorCompletedEventHandler(object sender, LogErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ModifyExternalUserCompletedEventHandler(object sender, ModifyExternalUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyExternalUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ModifyExternalUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AdministerExternalUserCompletedEventHandler(object sender, AdministerExternalUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdministerExternalUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdministerExternalUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AdministerInternalUserCompletedEventHandler(object sender, AdministerInternalUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdministerInternalUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdministerInternalUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ExternalLoginCompletedEventHandler(object sender, ExternalLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExternalLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExternalLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591